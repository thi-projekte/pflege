name: Build, Push and Redeploy Container via Portainer API

on:
  push:
    paths:
      - 'homepage/pflegital/**'
      - 'homepage/Dockerfile'

permissions:
  contents: read
  packages: write

jobs:
  build-and-redeploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE=ghcr.io/thi-projekte/pflege/homepage:latest
          docker build -f homepage/Dockerfile -t $IMAGE homepage
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Push Docker image
        run: |
          docker push $IMAGE

      - name: Redeploy Container via Portainer API
        env:
          API_URL: https://winfprojekt.de:9443/api
          API_KEY: ${{ secrets.PORTAINER_API_KEY }}
          ENDPOINT_ID: 1
          CONTAINER_NAME: homepage
        run: |
          # 1. Container-ID ermitteln
          CONTAINER_ID=$(curl -k -s -H "X-API-Key: $API_KEY" \
            "$API_URL/endpoints/$ENDPOINT_ID/docker/containers/json" \
            | jq -r ".[] | select(.Names[]|contains(\"/$CONTAINER_NAME\")) | .Id")

          if [ -z "$CONTAINER_ID" ]; then
            echo "‚ùå Container '$CONTAINER_NAME' nicht gefunden!"
            exit 1
          fi
          echo "‚ñ∂Ô∏è Found container ID: $CONTAINER_ID"

          # 2. Neuestes Image pullen
          echo "‚¨áÔ∏è Pull latest image $IMAGE"
          curl -k -X POST -H "X-API-Key: $API_KEY" \
            "$API_URL/endpoints/$ENDPOINT_ID/docker/images/create?fromImage=$IMAGE&tag=latest"

          # 3. Alten Container stoppen
          echo "‚è∏Ô∏è Stop container $CONTAINER_ID"
          curl -k -X POST -H "X-API-Key: $API_KEY" \
            "$API_URL/endpoints/$ENDPOINT_ID/docker/containers/$CONTAINER_ID/stop"

          # 4. Alten Container entfernen
          echo "üóëÔ∏è Remove container $CONTAINER_ID"
          curl -k -X DELETE -H "X-API-Key: $API_KEY" \
            "$API_URL/endpoints/$ENDPOINT_ID/docker/containers/$CONTAINER_ID"

          # 5. Neuen Container mit latest Image erstellen
          echo "üîÑ Create new container '$CONTAINER_NAME'"
          curl -k -X POST -H "X-API-Key: $API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "Image": "'"$IMAGE"'",
                  "name": "'"$CONTAINER_NAME"'",
                  "HostConfig": {
                    "NetworkMode": "nginx-proxy-manager",
                    "RestartPolicy": { "Name": "always" }
                  }
                }' \
            "$API_URL/endpoints/$ENDPOINT_ID/docker/containers/create?name=$CONTAINER_NAME"

          # 6. Neuen Container starten
          echo "‚ñ∂Ô∏è Start new container '$CONTAINER_NAME'"
          curl -k -X POST -H "X-API-Key: $API_KEY" \
            "$API_URL/endpoints/$ENDPOINT_ID/docker/containers/$CONTAINER_NAME/start"

          echo "‚úÖ Redeploy abgeschlossen!"
